#!/usr/bin/env python3
"""
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö SPNet –∏ STECCOM
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–º —Ñ–∞–π–ª–æ–≤ –≤ Oracle (production) –∏–ª–∏ PostgreSQL (testing)
"""

import streamlit as st
import pandas as pd
import psycopg2
from pathlib import Path
import os
import glob
from datetime import datetime
import subprocess
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª–µ–π –≤ production!
ORACLE_CONFIG = {
    'username': os.getenv('ORACLE_USER', 'billing7'),
    'password': os.getenv('ORACLE_PASSWORD', 'your-password-here'),
    'host': os.getenv('ORACLE_HOST', 'your-oracle-host'),
    'port': int(os.getenv('ORACLE_PORT', '1521')),
    'service_name': os.getenv('ORACLE_SERVICE', 'bm7')
}

POSTGRES_CONFIG = {
    'dbname': os.getenv('POSTGRES_DB', 'billing'),
    'user': os.getenv('POSTGRES_USER', 'postgres'),
    'password': os.getenv('POSTGRES_PASSWORD', 'your-password-here'),
    'host': os.getenv('POSTGRES_HOST', 'localhost'),
    'port': int(os.getenv('POSTGRES_PORT', '5432'))
}

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DEFAULT_DB_TYPE = 'postgresql'  # –∏–ª–∏ 'oracle'

DATA_DIR = Path(__file__).parent / 'data'
SPNET_DIR = DATA_DIR / 'SPNet reports'
STECCOM_DIR = DATA_DIR / 'STECCOMLLCRussiaSBD.AccessFees_reports'


def get_db_connection(db_type='postgresql'):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (Oracle –∏–ª–∏ PostgreSQL)"""
    if db_type == 'oracle':
        try:
            import cx_Oracle
            conn = cx_Oracle.connect(
                ORACLE_CONFIG['username'],
                ORACLE_CONFIG['password'],
                f"{ORACLE_CONFIG['host']}:{ORACLE_CONFIG['port']}/{ORACLE_CONFIG['service_name']}"
            )
            return conn
        except ImportError:
            st.error("cx_Oracle –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cx_Oracle")
            return None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Oracle: {e}")
            return None
    else:  # postgresql
        try:
            conn = psycopg2.connect(**POSTGRES_CONFIG)
            return conn
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return None


def get_loaded_files_info(table_name, source_file_column='SOURCE_FILE', db_type='postgresql'):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    conn = get_db_connection(db_type)
    if not conn:
        return pd.DataFrame()
    
    try:
        if db_type == 'oracle':
            # Oracle —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            query = f"""
            SELECT DISTINCT 
                {source_file_column} AS file_name,
                MAX(LOAD_DATE) AS last_load_date,
                COUNT(*) AS records_count
            FROM {table_name}
            WHERE {source_file_column} IS NOT NULL
            GROUP BY {source_file_column}
            ORDER BY MAX(LOAD_DATE) DESC
            FETCH FIRST 20 ROWS ONLY
            """
        else:
            # PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            query = f"""
            SELECT DISTINCT 
                {source_file_column.lower()} AS file_name,
                MAX(load_date) AS last_load_date,
                COUNT(*) AS records_count
            FROM {table_name.lower()}
            WHERE {source_file_column.lower()} IS NOT NULL
            GROUP BY {source_file_column.lower()}
            ORDER BY MAX(load_date) DESC
            LIMIT 20
            """
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö: {e}")
        return pd.DataFrame()
    finally:
        conn.close()


def list_data_files(directory):
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if not directory.exists():
        return []
    files = []
    for f in directory.iterdir():
        if f.is_file():
            files.append({
                'name': f.name,
                'size': f.stat().st_size,
                'modified': datetime.fromtimestamp(f.stat().st_mtime),
                'path': str(f)
            })
    return sorted(files, key=lambda x: x['modified'], reverse=True)


def run_import_script(script_name, db_type='postgresql'):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞ (Oracle –∏–ª–∏ PostgreSQL)"""
    import importlib.util
    
    scripts_dir = Path(__file__).parent / 'python'
    
    if db_type == 'oracle':
        # Oracle —Å–∫—Ä–∏–ø—Ç—ã
        if script_name == 'spnet':
            script_path = scripts_dir / 'load_spnet_traffic.py'
            module_name = "load_spnet_traffic"
            class_name = "SPNetDataLoader"
            method_name = "load_spnet_files"
            config = ORACLE_CONFIG
            connect_method = "connect_to_oracle"
        elif script_name == 'steccom':
            script_path = scripts_dir / 'load_steccom_expenses.py'
            module_name = "load_steccom_expenses"
            class_name = "STECCOMDataLoader"
            method_name = "load_steccom_files"
            config = ORACLE_CONFIG
            connect_method = "connect_to_oracle"
        else:
            return False, "Unknown script type"
    else:
        # PostgreSQL —Å–∫—Ä–∏–ø—Ç
        script_path = scripts_dir / 'load_data_postgres.py'
        module_name = "load_data_postgres"
        class_name = "PostgresDataLoader"
        if script_name == 'spnet':
            method_name = "load_spnet_files"
        elif script_name == 'steccom':
            method_name = "load_steccom_files"
        else:
            return False, "Unknown script type"
        config = POSTGRES_CONFIG
        connect_method = "connect"
    
    if not script_path.exists():
        return False, f"Script not found: {script_path}"
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        spec = importlib.util.spec_from_file_location(module_name, script_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        loader_class = getattr(module, class_name)
        loader = loader_class(config)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        if db_type == 'oracle':
            loader.gdrive_path = str(SPNET_DIR if script_name == 'spnet' else STECCOM_DIR)
        else:
            loader.spnet_path = str(SPNET_DIR)
            loader.steccom_path = str(STECCOM_DIR)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        connect_func = getattr(loader, connect_method)
        if not connect_func():
            return False, f"Failed to connect to {db_type} database"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        import io
        from contextlib import redirect_stdout, redirect_stderr
        
        log_capture = io.StringIO()
        try:
            with redirect_stdout(log_capture), redirect_stderr(log_capture):
                method = getattr(loader, method_name)
                result = method()
            
            log_output = log_capture.getvalue()
            
            if loader.connection:
                loader.connection.close()
            
            if result:
                return True, log_output if log_output else "Import completed successfully"
            else:
                return False, log_output if log_output else "Import failed"
        finally:
            if hasattr(loader, 'connection') and loader.connection:
                loader.connection.close()
            
    except Exception as e:
        import traceback
        return False, f"Error: {str(e)}\n{traceback.format_exc()}"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    st.set_page_config(
        page_title="Data Loader - Iridium M2M",
        page_icon="üì•",
        layout="wide"
    )
    
    st.title("üì• Data Loader - Iridium M2M")
    st.markdown("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö SPNet –∏ STECCOM")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ë–î –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.markdown("### üóÑÔ∏è Database Type")
        db_type = st.radio(
            "Select Database",
            ["postgresql", "oracle"],
            index=0 if DEFAULT_DB_TYPE == 'postgresql' else 1,
            help="PostgreSQL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, Oracle –¥–ª—è production"
        )
        
        st.markdown("---")
        
        if db_type == 'oracle':
            st.markdown("### ‚öôÔ∏è Oracle Configuration")
            oracle_host = st.text_input("Host", value=ORACLE_CONFIG['host'], key='oracle_host')
            oracle_port = st.number_input("Port", value=ORACLE_CONFIG['port'], key='oracle_port')
            oracle_service = st.text_input("Service Name", value=ORACLE_CONFIG['service_name'], key='oracle_service')
            oracle_user = st.text_input("Username", value=ORACLE_CONFIG['username'], key='oracle_user')
            oracle_pass = st.text_input("Password", type="password", value=ORACLE_CONFIG['password'], key='oracle_pass')
            
            if st.button("üîÑ Update Oracle Config"):
                ORACLE_CONFIG.update({
                    'host': oracle_host,
                    'port': int(oracle_port),
                    'service_name': oracle_service,
                    'username': oracle_user,
                    'password': oracle_pass
                })
                st.success("Oracle configuration updated!")
        else:
            st.markdown("### ‚öôÔ∏è PostgreSQL Configuration")
            pg_host = st.text_input("Host", value=POSTGRES_CONFIG['host'], key='pg_host')
            pg_port = st.number_input("Port", value=POSTGRES_CONFIG['port'], key='pg_port')
            pg_db = st.text_input("Database", value=POSTGRES_CONFIG['dbname'], key='pg_db')
            pg_user = st.text_input("Username", value=POSTGRES_CONFIG['user'], key='pg_user')
            pg_pass = st.text_input("Password", type="password", value=POSTGRES_CONFIG['password'], key='pg_pass')
            
            if st.button("üîÑ Update PostgreSQL Config"):
                POSTGRES_CONFIG.update({
                    'host': pg_host,
                    'port': int(pg_port),
                    'dbname': pg_db,
                    'user': pg_user,
                    'password': pg_pass
                })
                st.success("PostgreSQL configuration updated!")
        
        st.markdown("---")
        st.caption(f"üì° Current DB: **{db_type.upper()}**")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    tab1, tab2, tab3 = st.tabs([
        "üìä SPNet Traffic", 
        "üí∞ STECCOM Access Fees",
        "üìã Load History"
    ])
    
    # ========== SPNet Traffic Tab ==========
    with tab1:
        st.subheader("SPNet Traffic Reports")
        st.markdown("**–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:** `data/SPNet reports/`")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            spnet_files = list_data_files(SPNET_DIR)
            
            if spnet_files:
                st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(spnet_files)}**")
                
                files_df = pd.DataFrame(spnet_files)
                files_df['size_mb'] = files_df['size'] / (1024 * 1024)
                files_df['modified'] = files_df['modified'].dt.strftime('%Y-%m-%d %H:%M:%S')
                
                display_df = files_df[['name', 'size_mb', 'modified']].copy()
                display_df.columns = ['File Name', 'Size (MB)', 'Modified']
                
                st.dataframe(
                    display_df,
                    use_container_width=True,
                    hide_index=True,
                    height=300
                )
            else:
                st.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        with col2:
            st.markdown("### –î–µ–π—Å—Ç–≤–∏—è")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            uploaded_file = st.file_uploader(
                "Upload SPNet file",
                type=['csv', 'xlsx'],
                key='spnet_upload'
            )
            
            if uploaded_file:
                save_path = SPNET_DIR / uploaded_file.name
                if save_path.exists():
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª `{uploaded_file.name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    if st.button("üíæ Save File", key='save_spnet'):
                        try:
                            SPNET_DIR.mkdir(parents=True, exist_ok=True)
                            with open(save_path, 'wb') as f:
                                f.write(uploaded_file.getbuffer())
                            st.success(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {uploaded_file.name}")
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            st.markdown("---")
            
            # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            if st.button("üîÑ Import All SPNet Files", use_container_width=True, type="primary"):
                with st.spinner(f"–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö SPNet –≤ {db_type.upper()}..."):
                    success, message = run_import_script('spnet', db_type)
                    if success:
                        st.success("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        st.text_area("Log output", message, height=200)
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {message}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        st.markdown("---")
        st.subheader("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ –±–∞–∑—É —Ñ–∞–π–ª—ã")
        table_name = 'SPNET_TRAFFIC' if db_type == 'oracle' else 'spnet_traffic'
        source_col = 'SOURCE_FILE' if db_type == 'oracle' else 'source_file'
        loaded_spnet = get_loaded_files_info(table_name, source_col, db_type)
        if not loaded_spnet.empty:
            loaded_spnet.columns = ['File Name', 'Last Load Date', 'Records Count']
            st.dataframe(loaded_spnet, use_container_width=True, hide_index=True)
        else:
            st.info("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    
    # ========== STECCOM Access Fees Tab ==========
    with tab2:
        st.subheader("STECCOM Access Fees Reports")
        st.markdown("**–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:** `data/STECCOMLLCRussiaSBD.AccessFees_reports/`")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            steccom_files = list_data_files(STECCOM_DIR)
            
            if steccom_files:
                st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(steccom_files)}**")
                
                files_df = pd.DataFrame(steccom_files)
                files_df['size_mb'] = files_df['size'] / (1024 * 1024)
                files_df['modified'] = files_df['modified'].dt.strftime('%Y-%m-%d %H:%M:%S')
                
                display_df = files_df[['name', 'size_mb', 'modified']].copy()
                display_df.columns = ['File Name', 'Size (MB)', 'Modified']
                
                st.dataframe(
                    display_df,
                    use_container_width=True,
                    hide_index=True,
                    height=300
                )
            else:
                st.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        with col2:
            st.markdown("### –î–µ–π—Å—Ç–≤–∏—è")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            uploaded_file = st.file_uploader(
                "Upload STECCOM file",
                type=['csv'],
                key='steccom_upload'
            )
            
            if uploaded_file:
                save_path = STECCOM_DIR / uploaded_file.name
                if save_path.exists():
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª `{uploaded_file.name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    if st.button("üíæ Save File", key='save_steccom'):
                        try:
                            STECCOM_DIR.mkdir(parents=True, exist_ok=True)
                            with open(save_path, 'wb') as f:
                                f.write(uploaded_file.getbuffer())
                            st.success(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {uploaded_file.name}")
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            st.markdown("---")
            
            # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            if st.button("üîÑ Import All STECCOM Files", use_container_width=True, type="primary"):
                with st.spinner(f"–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö STECCOM –≤ {db_type.upper()}..."):
                    success, message = run_import_script('steccom', db_type)
                    if success:
                        st.success("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        st.text_area("Log output", message, height=200)
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {message}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        st.markdown("---")
        st.subheader("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ –±–∞–∑—É —Ñ–∞–π–ª—ã")
        table_name = 'STECCOM_EXPENSES' if db_type == 'oracle' else 'steccom_expenses'
        source_col = 'SOURCE_FILE' if db_type == 'oracle' else 'source_file'
        loaded_steccom = get_loaded_files_info(table_name, source_col, db_type)
        if not loaded_steccom.empty:
            loaded_steccom.columns = ['File Name', 'Last Load Date', 'Records Count']
            st.dataframe(loaded_steccom, use_container_width=True, hide_index=True)
        else:
            st.info("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    
    # ========== Load History Tab ==========
    with tab3:
        st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫")
        
        conn = get_db_connection(db_type)
        if conn:
            try:
                # –ò—Å—Ç–æ—Ä–∏—è –∏–∑ load_logs
                if db_type == 'oracle':
                    query = """
                    SELECT 
                        TABLE_NAME,
                        LOAD_DATE,
                        RECORDS_COUNT,
                        STATUS,
                        ERROR_MESSAGE
                    FROM LOAD_LOGS
                    ORDER BY LOAD_DATE DESC
                    FETCH FIRST 50 ROWS ONLY
                    """
                else:
                    query = """
                    SELECT 
                        table_name,
                        load_date,
                        records_count,
                        status,
                        error_message
                    FROM load_logs
                    ORDER BY load_date DESC
                    LIMIT 50
                    """
                history_df = pd.read_sql(query, conn)
                
                if not history_df.empty:
                    history_df.columns = ['Table Name', 'Load Date', 'Records Count', 'Status', 'Error Message']
                    history_df['Load Date'] = pd.to_datetime(history_df['Load Date']).dt.strftime('%Y-%m-%d %H:%M:%S')
                    st.dataframe(history_df, use_container_width=True, hide_index=True)
                else:
                    st.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç–∞")
            except Exception as e:
                table_name = 'LOAD_LOGS' if db_type == 'oracle' else 'load_logs'
                st.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            finally:
                conn.close()


if __name__ == "__main__":
    main()

