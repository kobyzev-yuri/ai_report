#!/usr/bin/env python3
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞ Iridium M2M
–í–µ—Ä—Å–∏—è –¥–ª—è Oracle Database
–°–æ–≥–ª–∞—Å–Ω–æ –¢–ó –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º, –ø–æ IMEI
"""

import streamlit as st
import pandas as pd
import cx_Oracle
from datetime import datetime
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Oracle –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'user': 'billing7',
    'password': 'billing',
    'host': '192.168.3.35',
    'port': 1521,
    'service_name': 'bm7'
}


def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Oracle"""
    try:
        dsn = cx_Oracle.makedsn(
            DB_CONFIG['host'],
            DB_CONFIG['port'],
            service_name=DB_CONFIG['service_name']
        )
        conn = cx_Oracle.connect(
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            dsn=dsn
        )
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Oracle: {e}")
        return None


def convert_bill_month(bill_month):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BILL_MONTH –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if pd.isna(bill_month):
        return ""
    month = int(bill_month) // 10000
    year = int(bill_month) % 10000
    return f"{year}-{month:02d}"


def get_main_report():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    conn = get_connection()
    if not conn:
        return None
    
    # Oracle-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    query = """
    SELECT 
        cor.IMEI,
        cor.CONTRACT_ID,
        se.ACTIVATION_DATE,
        cor.PLAN_NAME AS tariff,
        cor.BILL_MONTH,
        
        -- –ò–∑ STECCOM
        SUM(CASE WHEN se.DESCRIPTION = 'Activation Fee' THEN se.AMOUNT ELSE 0 END) AS activation_fee,
        SUM(CASE WHEN se.DESCRIPTION = 'Advance Charge' THEN se.AMOUNT ELSE 0 END) AS advance_charge,
        SUM(CASE WHEN se.DESCRIPTION = 'Prorated' THEN se.AMOUNT ELSE 0 END) AS prorated,
        SUM(CASE WHEN se.DESCRIPTION = 'Credit' THEN se.AMOUNT ELSE 0 END) AS credit,
        
        -- –ò–∑ SPNet
        cor.TOTAL_USAGE_KB,
        cor.INCLUDED_KB,
        cor.OVERAGE_KB,
        cor.CALCULATED_OVERAGE AS calculated_overage_charge,
        
        -- –ò—Ç–æ–≥–∏
        cor.SPNET_TOTAL_AMOUNT AS spnet_total,
        cor.STECCOM_TOTAL_AMOUNT AS steccom_total,
        
        -- –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
        (cor.CALCULATED_OVERAGE + 
         SUM(CASE WHEN se.DESCRIPTION = 'Advance Charge' THEN se.AMOUNT ELSE 0 END)) AS total_charge
        
    FROM V_CONSOLIDATED_OVERAGE_REPORT cor
    LEFT JOIN STECCOM_EXPENSES se 
        ON cor.IMEI = se.ICC_ID_IMEI 
        AND cor.CONTRACT_ID = se.CONTRACT_ID
        AND TO_CHAR(se.INVOICE_DATE, 'YYYYMM') = (
            LPAD(TO_CHAR(MOD(cor.BILL_MONTH, 10000)), 4, '0') || 
            LPAD(TO_CHAR(TRUNC(cor.BILL_MONTH / 10000)), 2, '0')
        )
    WHERE cor.STECCOM_TOTAL_AMOUNT IS NOT NULL
      AND cor.BILL_MONTH IS NOT NULL
      AND cor.IMEI IS NOT NULL
    GROUP BY 
        cor.IMEI,
        cor.CONTRACT_ID,
        se.ACTIVATION_DATE,
        cor.PLAN_NAME,
        cor.BILL_MONTH,
        cor.TOTAL_USAGE_KB,
        cor.INCLUDED_KB,
        cor.OVERAGE_KB,
        cor.CALCULATED_OVERAGE,
        cor.SPNET_TOTAL_AMOUNT,
        cor.STECCOM_TOTAL_AMOUNT
    ORDER BY cor.BILL_MONTH DESC, cor.CALCULATED_OVERAGE DESC
    """
    
    try:
        df = pd.read_sql_query(query, conn)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        df['period'] = df['bill_month'].apply(convert_bill_month)
        df['activation_date'] = pd.to_datetime(df['activation_date']).dt.strftime('%Y-%m-%d')
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        df = df.rename(columns={
            'imei': 'IMEI',
            'contract_id': 'Contract ID',
            'activation_date': 'Activation Date',
            'tariff': '–¢–∞—Ä–∏—Ñ',
            'period': '–ü–µ—Ä–∏–æ–¥',
            'activation_fee': 'Activation Fee',
            'advance_charge': 'Advance Charge',
            'prorated': 'Prorated',
            'credit': 'Credit',
            'total_usage_kb': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–ö–ë)',
            'included_kb': '–í–∫–ª—é—á–µ–Ω–æ (–ö–ë)',
            'overage_kb': '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ (–ö–ë)',
            'calculated_overage_charge': '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è ($)',
            'spnet_total': 'SPNet Total ($)',
            'steccom_total': 'STECCOM Total ($)',
            'total_charge': '–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ ($)'
        })
        
        return df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        st.error(traceback.format_exc())
        return None
    finally:
        conn.close()


def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    conn = get_connection()
    if not conn:
        return None
    
    query = """
    SELECT 
        COUNT(DISTINCT IMEI) AS unique_devices,
        COUNT(DISTINCT CONTRACT_ID) AS unique_contracts,
        COUNT(DISTINCT BILL_MONTH) AS periods,
        SUM(CALCULATED_OVERAGE) AS total_overage,
        SUM(ADVANCE_CHARGE) AS total_advance,
        SUM(CALCULATED_OVERAGE + ADVANCE_CHARGE) AS total_charges,
        AVG(TOTAL_USAGE_KB) AS avg_usage_kb
    FROM V_CONSOLIDATED_OVERAGE_REPORT
    WHERE STECCOM_TOTAL_AMOUNT IS NOT NULL
      AND BILL_MONTH IS NOT NULL
      AND IMEI IS NOT NULL
    """
    
    try:
        df = pd.read_sql_query(query, conn)
        return df.iloc[0].to_dict()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None
    finally:
        conn.close()


def get_tariff_plans():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    conn = get_connection()
    if not conn:
        return []
    
    query = "SELECT DISTINCT PLAN_NAME FROM TARIFF_PLANS WHERE ACTIVE = 'Y' ORDER BY PLAN_NAME"
    
    try:
        cursor = conn.cursor()
        cursor.execute(query)
        plans = [row[0] for row in cursor.fetchall()]
        cursor.close()
        return plans
    except:
        return []
    finally:
        conn.close()


def get_periods():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
    conn = get_connection()
    if not conn:
        return []
    
    query = "SELECT DISTINCT BILL_MONTH FROM SPNET_TRAFFIC ORDER BY BILL_MONTH DESC"
    
    try:
        cursor = conn.cursor()
        cursor.execute(query)
        periods = [convert_bill_month(row[0]) for row in cursor.fetchall() if row[0]]
        cursor.close()
        return periods
    except:
        return []
    finally:
        conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="–û—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞ Iridium M2M",
        page_icon="üìä",
        layout="wide"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –ø–æ IMEI (Iridium M2M)")
    st.caption("üî∂ Oracle Database Version")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        tariff_plans = get_tariff_plans()
        periods = get_periods()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        selected_period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã"] + periods
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∞—Ä–∏—Ñ—É
        selected_tariff = st.selectbox(
            "–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
            ["–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã"] + tariff_plans
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é
        min_overage = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ ($)",
            min_value=0.0,
            value=0.0,
            step=10.0
        )
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        st.markdown("---")
        st.caption("üì° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        st.caption(f"Oracle {DB_CONFIG['service_name']}")
        st.caption(f"@ {DB_CONFIG['host']}:{DB_CONFIG['port']}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.header("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats = get_statistics()
    
    if stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–£—Å—Ç—Ä–æ–π—Å—Ç–≤", f"{stats['unique_devices']:,}")
            st.metric("–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤", f"{stats['unique_contracts']:,}")
        
        with col2:
            st.metric("–ü–µ—Ä–∏–æ–¥–æ–≤", f"{stats['periods']:,}")
            st.metric("–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫", f"{stats['avg_usage_kb']:,.0f} –ö–ë")
        
        with col3:
            st.metric("–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ", f"${stats['total_overage']:,.2f}")
            st.metric("–ê–±–æ–Ω–ø–ª–∞—Ç–∞", f"${stats['total_advance']:,.2f}")
        
        with col4:
            st.metric("–ò—Ç–æ–≥–æ", f"${stats['total_charges']:,.2f}", 
                     delta=None, delta_color="off")
            efficiency = (stats['total_overage'] / stats['total_charges'] * 100) if stats['total_charges'] > 0 else 0
            st.metric("–î–æ–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è", f"{efficiency:.1f}%")
    
    st.markdown("---")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.header("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Oracle..."):
        df = get_main_report()
    
    if df is not None and not df.empty:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df.copy()
        
        if selected_period != "–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã":
            filtered_df = filtered_df[filtered_df['–ü–µ—Ä–∏–æ–¥'] == selected_period]
        
        if selected_tariff != "–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã":
            filtered_df = filtered_df[filtered_df['–¢–∞—Ä–∏—Ñ'] == selected_tariff]
        
        if min_overage > 0:
            filtered_df = filtered_df[filtered_df['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è ($)'] >= min_overage]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        st.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_df):,}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.dataframe(
            filtered_df[[
                'IMEI', 'Contract ID', 'Activation Date', '–¢–∞—Ä–∏—Ñ', '–ü–µ—Ä–∏–æ–¥',
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–ö–ë)', '–í–∫–ª—é—á–µ–Ω–æ (–ö–ë)', '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ (–ö–ë)',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è ($)', 'Advance Charge', '–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ ($)'
            ]],
            use_container_width=True,
            hide_index=True
        )
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.markdown("---")
        st.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            # CSV —ç–∫—Å–ø–æ—Ä—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç)
            csv_buffer = io.StringIO()
            filtered_df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
            csv_data = csv_buffer.getvalue()
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV (–æ—Å–Ω–æ–≤–Ω–æ–π)",
                data=csv_data,
                file_name=f"iridium_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            # CSV —ç–∫—Å–ø–æ—Ä—Ç (–ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏)
            csv_buffer_full = io.StringIO()
            filtered_df.to_csv(csv_buffer_full, index=False, encoding='utf-8-sig')
            csv_data_full = csv_buffer_full.getvalue()
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV (–≤—Å–µ –ø–æ–ª—è)",
                data=csv_data_full,
                file_name=f"iridium_report_full_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col3:
            # Excel —ç–∫—Å–ø–æ—Ä—Ç (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω openpyxl)
            try:
                excel_buffer = io.BytesIO()
                with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                    filtered_df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')
                excel_data = excel_buffer.getvalue()
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                    data=excel_data,
                    file_name=f"iridium_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            except:
                st.info("Excel —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openpyxl)")
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if len(filtered_df) > 0:
            st.markdown("---")
            st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–ó–∞–ø–∏—Å–µ–π", f"{len(filtered_df):,}")
            
            with col2:
                total_overage = filtered_df['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è ($)'].sum()
                st.metric("–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ", f"${total_overage:,.2f}")
            
            with col3:
                total_advance = filtered_df['Advance Charge'].sum()
                st.metric("–ê–±–æ–Ω–ø–ª–∞—Ç–∞", f"${total_advance:,.2f}")
            
            with col4:
                total = filtered_df['–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ ($)'].sum()
                st.metric("–ò—Ç–æ–≥–æ", f"${total:,.2f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é
        st.markdown("---")
        st.header("üìà –¢–æ–ø-10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é")
        
        top_devices = filtered_df.nlargest(10, '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è ($)')
        
        chart_data = pd.DataFrame({
            'IMEI': top_devices['IMEI'].str[-8:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ ($)': top_devices['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è ($)']
        })
        
        st.bar_chart(chart_data.set_index('IMEI'))
        
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    st.caption(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Oracle {DB_CONFIG['service_name']}@{DB_CONFIG['host']}:{DB_CONFIG['port']}")


if __name__ == "__main__":
    main()

